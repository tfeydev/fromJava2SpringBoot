name: Build & Deploy SpringBootAngularFullstack

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Repository auschecken
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2️⃣ Java 21 bereitstellen
      - name: Setup Java 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      # 3️⃣ Maven Backend Build
      - name: Build Backend with Maven
        working-directory: ./SpringBootAngularFullstack/backend
        run: |
          chmod +x ./mvnw || true
          ./mvnw clean package -DskipTests
          ls -l target/

      # 4️⃣ Optional: Build Frontend (Angular)
      - name: Build Frontend (Optional)
        working-directory: ./SpringBootAngularFullstack/frontend
        run: |
          if [ -f package.json ]; then
            npm install
            npm run build --prod
          fi
          ls -l dist/

      # 5️⃣ Docker-Images bauen
      - name: Build Docker Images
        run: |
          docker build -t springboot-angular-fullstack-backend:latest -f SpringBootAngularFullstack/backend/Dockerfile SpringBootAngularFullstack/backend
          docker build -t springboot-angular-fullstack-frontend:latest -f SpringBootAngularFullstack/frontend/Dockerfile SpringBootAngularFullstack/frontend

      # 6️⃣ SSH Private Key auf VM schreiben
      - name: Write SSH Private Key
        run: |
          echo "${{ secrets.VM_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ls -l /tmp/ssh_key

      # 7️⃣ Docker Images via Stream deployen
      - name: Deploy Docker Images via SSH Stream
        run: |
          (
            docker save springboot-angular-fullstack-backend:latest
            docker save springboot-angular-fullstack-frontend:latest
          ) | gzip | \
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
          "gunzip | docker load && echo 'All images loaded'; cd /home/ubuntu/dev && docker-compose -f docker-compose.yml up -d --build"
